# import pygame module in this program
from logging import exception

import pygame

# activate the pygame library .
# initiate pygame and give permission
# to use pygame's functionality.
pygame.init()

# create the display surface object
# of specific dimension..e(500, 500).
win = pygame.display.set_mode((500, 500))

# set the pygame window name
pygame.display.set_caption("Moving rectangle")

# object current co-ordinates
x = 200
y = 200
x1 = 300
y1 = 300
# dimensions of the object
width = 20
height = 20
width1 =20
height1 =20
# velocity / speed of movement
vel = 10

col1 = pygame.Rect(x, y, 22, 22)
col2 = pygame.Rect(x1, y1, 22, 22)

#defining crash function
def crash():
    # take a global variable
    global x1
    global x
    if x1 < (x + height):

        if ((x1 > x and x1 < (x + height))
                or ((x1 + height1) > x
                    and (x1 + height1) < (x + height))):
            pygame.quit()

    # check conditions
    if x1 < (x + width):

        if ((x1 > x
             and x1 < (x + width))
                or ((x1 + width1) > x
                    and (x1 + width1) < (x + width))):
            pygame.quit()
    if x < (x1 + height1):

        if ((x > x1
             and x < (x1 + height1))
                or ((x + height) > x1
                    and (x + height) < (x1 + height1))):
            pygame.quit()

    # check conditions
    if x < (x1 + width1):

        if ((x > x1
             and x < (x1 + width1))
                or ((x + width) > x1
                    and (x + width) < (x1 + width1))):
            pygame.quit()


# Indicates pygame is running
run = True

# infinite loop
while run:
    # creates time delay of 10ms
    pygame.time.delay(10)

    # iterate over the list of Event objects
    # that was returned by pygame.event.get() method.
    for event in pygame.event.get():

        # if event object type is QUIT
        # then quitting the pygame
        # and program both.
        if event.type == pygame.QUIT:
            # it will make exit the while loop
            run = False
    # stores keys pressed
    keys = pygame.key.get_pressed()

    # if left arrow key is pressed
    if keys[pygame.K_LEFT] and x > 0:
        # decrement in x co-ordinate
        x -= vel
    if keys[pygame.K_a] and x1 > 0:
        # decrement in x co-ordinate
        x1 -= vel
    # if left arrow key is pressed
    if keys[pygame.K_RIGHT] and x < 500 - width:
        # increment in x co-ordinate
        x += vel
    if keys[pygame.K_d] and x1 < 500 - width:
        # increment in x co-ordinate
        x1 += vel
    # if left arrow key is pressed
    if keys[pygame.K_UP] and y > 0:
        # decrement in y co-ordinate
        y -= vel
    if keys[pygame.K_w] and y1 > 0:
        # decrement in y co-ordinate
        y1 -= vel
    # if left arrow key is pressed
    if keys[pygame.K_DOWN] and y < 500 - height:
        # increment in y co-ordinate
        y += vel
    if keys[pygame.K_s] and y1 < 500 - height:
        # increment in y co-ordinate
        y1 += vel
    if (x==x1 & y==y1):
        raise crash()

    # completely fill the surface object
    # with black colour
    win.fill((0, 0, 0))

    # drawing object on screen which is rectangle here
    pygame.draw.rect(win, (255, 0, 0), (x, y, width, height))
    pygame.draw.rect(win, (255, 0, 255), (x1, y1, width1, height1))
    pygame.draw.rect(win, (255,255,255),col2 ,2)
    # it refreshes the window
    pygame.display.update()

# closes the pygame window
pygame.quit()

